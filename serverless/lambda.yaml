Parameters:
    BucketStackName:
        Type: String
Resources:
    MyBooksBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Sub '${AWS::StackName}-${AWS::AccountId}-books-bucket'
    MyLambdaIamRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Service: "lambda.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
    MyLambda:
        Type: AWS::Lambda::Function
        DependsOn:
            - MyLambdaIamRole
            - MyBooksBucket
        Properties:
            Role: !GetAtt MyLambdaIamRole.Arn
            Handler: "main.main"
            Runtime: "python3.7"
            Environment:
                Variables:
                    BUCKET_NAME: !Ref MyBooksBucket
            Code:
                S3Bucket:
                    Fn::ImportValue:
                        !Sub "${BucketStackName}-LambdaBucket"
                S3Key: "my-lambda-deployment.zip"
    MyLambdaInvokePermisson:
        Type: AWS::Lambda::Permission
        DependsOn: MyLambda
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt MyLambda.Arn
            Principal: "apigateway.amazonaws.com"
Outputs:
    MyLambdaArn:
        Value: !GetAtt MyLambda.Arn
        Export:
            Name: !Sub "${AWS::StackName}-MyLambdaArn"
