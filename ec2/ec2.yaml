Parameters:
    KeyPair:
        Type: String
    AvZone:
        Type: String
        Default: "us-east-1a"
    DeploymentBucket:
        Type: String
    AppPort:
        Type: Number
        Default: 5000
Resources:
    EC2S3GetRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - ec2.amazonaws.com
                        Action:
                            - 'sts:AssumeRole'
            Policies:
                -
                    PolicyName: "EC2S3GetRole"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:GetObject"
                                Resource: !Sub 'arn:aws:s3:::${DeploymentBucket}/*'
    EC2S3GetInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        DependsOn: EC2S3GetRole
        Properties:
            InstanceProfileName: "S3ReadOnlyForEC2"
            Roles:
                - !Ref EC2S3GetRole
    MyClusterPlacementGroup:
        Type: AWS::EC2::PlacementGroup
        Properties:
            Strategy: "spread"
    MySecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "This is a security group"
            SecurityGroupIngress:
                -
                    CidrIp: "0.0.0.0/0"
                    IpProtocol: "tcp"
                    FromPort: 22
                    ToPort: 22
                -
                    CidrIp: "0.0.0.0/0"
                    IpProtocol: "tcp"
                    FromPort: !Ref AppPort
                    ToPort: !Ref AppPort
    MyVolume:
        Type: AWS::EC2::Volume
        Properties:
            AvailabilityZone: !Ref AvZone
            Size: 1
    MyEC2:
        Type: AWS::EC2::Instance
        DependsOn:
            - MySecurityGroup
            - MyClusterPlacementGroup
            - EC2S3GetInstanceProfile
        Properties:
            KeyName: !Ref KeyPair
            InstanceType: "t2.micro"
            ImageId: "ami-00dc79254d0461090"
            AvailabilityZone: !Ref AvZone
            PlacementGroupName: !Ref MyClusterPlacementGroup
            IamInstanceProfile: !Ref EC2S3GetInstanceProfile
            SecurityGroupIds:
                - !GetAtt MySecurityGroup.GroupId
            UserData:
                Fn::Base64:
                    !Sub |
                        #!/bin/bash -xe
                        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                        python get-pip.py
                        pip install -U gunicorn flask
                        aws s3 cp s3://${DeploymentBucket}/app.tar.gz .
                        tar -xf app.tar.gz
                        cd app && gunicorn hello:app -b 0.0.0.0:${AppPort} --daemon

    MyVolumeAttach:
        Type: AWS::EC2::VolumeAttachment
        DependsOn: MyEC2
        Properties:
            Device: "/dev/sdb"
            InstanceId: !Ref MyEC2
            VolumeId: !Ref MyVolume
