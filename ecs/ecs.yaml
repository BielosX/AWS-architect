Parameters:
    VPCStack:
        Type: String
    KeyPair:
        Type: String
Resources:
    MyCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: "MyCluster"
    MySecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "This is a security group"
            VpcId:
                Fn::ImportValue:
                    !Sub "${VPCStack}-VpcId"
            SecurityGroupIngress:
                -
                    CidrIp: "10.0.0.0/24"
                    IpProtocol: "tcp"
                    FromPort: 0
                    ToPort: 65535
                -
                    CidrIp: "10.0.0.0/24"
                    IpProtocol: "udp"
                    FromPort: 0
                    ToPort: 65535
    MyEC2ECSRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Service: "ec2.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            Policies:
                -
                    PolicyName: "CreateLogGroupPolicy"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action:
                                    - "logs:CreateLogGroup"
                                Resource: "*"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

    EC2ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        DependsOn: MyEC2ECSRole
        Properties:
            InstanceProfileName: "ECSForEC2"
            Roles:
                - !Ref MyEC2ECSRole
    MyLaunchTemplate:
        Type: AWS::EC2::LaunchTemplate
        DependsOn:
            - MySecurityGroup
            - MyCluster
            - EC2ECSInstanceProfile
        Properties:
            LaunchTemplateData:
                KeyName: !Ref KeyPair
                InstanceType: "t2.micro"
                ImageId: "ami-0f81924348bcd01a1"
                IamInstanceProfile:
                    Name: !Ref EC2ECSInstanceProfile
                SecurityGroupIds:
                    - !GetAtt MySecurityGroup.GroupId
                UserData:
                    Fn::Base64:
                        !Sub |
                            #!/bin/bash -xe
                            cat <<EOT >> /etc/ecs/ecs.config
                            ECS_CLUSTER=${MyCluster}
                            ECS_ENABLE_CONTAINER_METADATA=true
                            ECS_ENABLE_TASK_IAM_ROLE=true
                            ECS_ENABLE_TASK_IAM_ROLE_NETWORK_HOST=true
                            EOT
    MyAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        DependsOn: MyLaunchTemplate
        Properties:
            LaunchTemplate:
                LaunchTemplateId: !Ref MyLaunchTemplate
                Version: 1
            VPCZoneIdentifier:
                -
                    Fn::ImportValue:
                        !Sub "${VPCStack}-PrivateSubnetId"
            MinSize: 2
            MaxSize: 2
Outputs:
    MyClusterId:
        Value: !Ref MyCluster
        Export:
            Name: !Sub "${AWS::StackName}-ClusterId"
    MySecurityGroupId:
        Value: !Ref MySecurityGroup
        Export:
            Name: !Sub "${AWS::StackName}-SecurityGroupId"
