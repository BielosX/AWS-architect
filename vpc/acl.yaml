Parameters:
    VPCStackName:
        Type: String
    ForbiddenIP:
        Type: String
Resources:
    MyACL:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId:
                Fn::ImportValue:
                    !Sub "${VPCStackName}-VpcId"
    MyDenyIpEgressACL:
        Type: AWS::EC2::NetworkAclEntry
        DependsOn: MyACL
        Properties:
            CidrBlock: !Sub "${ForbiddenIP}/32"
            Egress: true
            NetworkAclId: !Ref MyACL
            Protocol: 6
            PortRange:
                From: 80
                To: 80
            RuleAction: "deny"
            RuleNumber: 100
    MyDenyIpIngressAcl:
        Type: AWS::EC2::NetworkAclEntry
        DependsOn: MyACL
        Properties:
            CidrBlock: !Sub "${ForbiddenIP}/32"
            Egress: false
            NetworkAclId: !Ref MyACL
            Protocol: 6
            PortRange:
                From: 80
                To: 80
            RuleAction: "deny"
            RuleNumber: 100
    MyAllowIpEgressACL:
        Type: AWS::EC2::NetworkAclEntry
        DependsOn: MyACL
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref MyACL
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 200
    MyAllowIpIngressAcl:
        Type: AWS::EC2::NetworkAclEntry
        DependsOn: MyACL
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: false
            NetworkAclId: !Ref MyACL
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 200
    MySubnetAclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        DependsOn: MyACL
        Properties:
            NetworkAclId: !Ref MyACL
            SubnetId:
                Fn::ImportValue:
                    !Sub "${VPCStackName}-PublicSubnetId"
